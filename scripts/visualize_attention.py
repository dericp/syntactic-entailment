import numpy as np
import matplotlib
import matplotlib.pyplot as plt
# sphinx_gallery_thumbnail_number = 2

premise = ['The', 'continental', 'crust', 'is', 'less', 'dense', 'than', 'the',
           'mantle', 'but', 'the', 'oceanic', 'crust', 'is', 'not', '.']
hypothesis = ['The', 'oceanic', 'crust', 'is', 'more', 'dense', 'than', 'the',
              'mantle', '.']

da_h_to_p_attention = np.array([[4.82274487170619e-31, 0.0, 0.0, 0.5, 0.0, 0.0, 2.249963411057046e-33, 4.82274487170619e-31, 0.0, 1.2182965674626343e-25, 4.82274487170619e-31, 0.0, 0.0, 0.5, 2.07386546381683e-23, 3.14171115701624e-42, 0.0], [1.0864135219890159e-05, 1.192428933372014e-10, 5.1575903270428824e-11, 0.4999181032180786, 1.2316784259169822e-09, 1.4314088803146774e-10, 3.3572175652807346e-06, 1.0864135219890159e-05, 1.2702144024101525e-12, 5.9762784076156095e-05, 1.0864135219890159e-05, 2.6359754765233057e-13, 5.1575903270428824e-11, 0.4999181032180786, 6.79257937008515e-05, 1.4062736397590925e-07, 1.7427893472170362e-16], [1.3339535639284028e-12, 1.2797187566573396e-25, 7.008032219919717e-25, 0.5, 3.403934174939942e-23, 1.3878776018275426e-24, 6.238813549705024e-15, 1.3339535639284028e-12, 9.828032543270217e-30, 2.5479462290034505e-12, 1.3339535639284028e-12, 6.576626291827393e-35, 7.008032219919717e-25, 0.5, 2.915791913471466e-11, 6.513164308551193e-19, 6.25976279076082e-39], [0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 3.1974458416169094e-37, 0.0, 0.0, 0.0, 0.5, 1.3212126713120492e-33, 0.0, 0.0], [7.996040537217079e-32, 0.0, 0.0, 0.5, 0.0, 0.0, 2.457502595761284e-30, 7.996040537217079e-32, 0.0, 2.5083161554355187e-22, 7.996040537217079e-32, 0.0, 0.0, 0.5, 1.9143965982133235e-20, 1.019775339233885e-39, 0.0], [3.55904106785605e-16, 4.797837130888784e-34, 2.3115539207809317e-37, 0.5, 3.7592009917375713e-29, 3.678773047593293e-32, 9.40533059640048e-18, 3.55904106785605e-16, 6.9675922762544284e-40, 6.282066609530207e-14, 3.55904106785605e-16, 0.0, 2.3115539207809317e-37, 0.5, 1.0098597305607804e-12, 1.839398584736358e-22, 0.0], [8.323298399584874e-31, 0.0, 0.0, 0.5, 0.0, 0.0, 2.880652538271984e-29, 8.323298399584874e-31, 0.0, 1.0178371861834007e-22, 8.323298399584874e-31, 0.0, 0.0, 0.5, 1.0333384973463206e-20, 4.023762679280889e-39, 0.0], [4.82274487170619e-31, 0.0, 0.0, 0.5, 0.0, 0.0, 2.249963411057046e-33, 4.82274487170619e-31, 0.0, 1.2182965674626343e-25, 4.82274487170619e-31, 0.0, 0.0, 0.5, 2.07386546381683e-23, 3.14171115701624e-42, 0.0], [7.894072223159354e-13, 2.2704151478978707e-25, 2.991795848876695e-29, 0.5, 2.4284647516009166e-22, 1.2734895904749718e-26, 2.2281971461066835e-13, 7.894072223159354e-13, 4.364462513877662e-28, 6.631879767571291e-11, 7.894072223159354e-13, 4.930606893228165e-36, 2.991795848876695e-29, 0.5, 7.781220112690335e-10, 3.344607199545886e-17, 6.664602120999652e-39], [3.619027669635688e-27, 0.0, 0.0, 0.5, 0.0, 0.0, 1.25323913044452e-26, 3.619027669635688e-27, 0.0, 1.5179883002126536e-18, 3.619027669635688e-27, 0.0, 0.0, 0.5, 3.2773524526616497e-17, 1.209194231024027e-32, 0.0], [0.012096722610294819, 0.0003433325618971139, 0.00038534810300916433, 0.46126577258110046, 0.0005252048722468317, 0.00021039231796748936, 0.0056877536699175835, 0.012096722610294819, 0.0001347731304122135, 0.012515313923358917, 0.012096722610294819, 1.3680392839887645e-05, 0.00038534810300916433, 0.46126577258110046, 0.01925676129758358, 0.0013830933021381497, 0.0003373179933987558]])
da_p_to_h_attention = np.array([[9.64548974341238e-31, 0.0, 0.0, 1.0, 6.143219993781495e-31, 0.0, 4.499926822114092e-33, 9.64548974341238e-31, 0.0, 6.282021015568155e-42, 0.0], [1.2002901554890744e-16, 0.0, 7.356788911736003e-40, 1.0, 1.843635766428153e-16, 1.6560225800182373e-35, 2.851439140491566e-17, 1.2002901554890744e-16, 4.287608963233216e-40, 5.696137152224733e-22, 0.0], [2.6679071278568056e-12, 1.3153252583654787e-34, 1.4016064439839434e-24, 1.0, 2.7869628601976705e-14, 2.7757552036550853e-24, 1.2477627099410048e-14, 2.6679071278568056e-12, 1.9656065086540434e-29, 1.3026328617102385e-18, 1.2519526982820103e-38], [0.0, 0.0, 0.0, 1.0, 1.401298464324817e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [5.592640822892045e-21, 0.0, 0.0, 1.0, 3.480923669362481e-18, 1.401298464324817e-45, 3.845362334954423e-20, 5.592640822892045e-21, 0.0, 1.7889775282650462e-26, 0.0], [7.1180821357121e-16, 0.0, 4.6231078415618635e-37, 1.0, 4.0450381327440253e-16, 7.357546095186586e-32, 1.881066119280096e-17, 7.1180821357121e-16, 1.3935184552508857e-39, 3.678797169472716e-22, 0.0], [1.6646596799169748e-30, 0.0, 0.0, 1.0, 6.984495876885108e-27, 0.0, 5.761305076543968e-29, 1.6646596799169748e-30, 0.0, 8.047525358561778e-39, 0.0], [9.64548974341238e-31, 0.0, 0.0, 1.0, 6.143219993781495e-31, 0.0, 4.499926822114092e-33, 9.64548974341238e-31, 0.0, 6.282021015568155e-42, 0.0], [1.5788144446318708e-12, 9.86121378645633e-36, 5.98359169775339e-29, 1.0, 8.501840724484122e-13, 2.5469791809499435e-26, 4.456394292213367e-13, 1.5788144446318708e-12, 8.728925027755324e-28, 6.689214399091772e-17, 1.3329204241999304e-38], [1.939066093757675e-34, 0.0, 0.0, 1.0, 1.5336030624274135e-30, 0.0, 4.379231653946467e-34, 1.939066093757675e-34, 0.0, 2.0963425026299263e-42, 0.0], [9.64548974341238e-31, 0.0, 0.0, 1.0, 6.143219993781495e-31, 0.0, 4.499926822114092e-33, 9.64548974341238e-31, 0.0, 6.282021015568155e-42, 0.0], [2.1730455046053976e-05, 5.27248058580787e-13, 1.0316217324835009e-10, 0.9999366998672485, 1.2830057130486239e-05, 2.863105585948489e-10, 6.715109975630185e-06, 2.1730455046053976e-05, 2.540684026011708e-12, 2.812829791309923e-07, 3.485928889618203e-16], [2.6679071278568056e-12, 1.3153252583654787e-34, 1.4016064439839434e-24, 1.0, 2.7869628601976705e-14, 2.7757552036550853e-24, 1.2477627099410048e-14, 2.6679071278568056e-12, 1.9656065086540434e-29, 1.3026328617102385e-18, 1.2519526982820103e-38], [0.0, 0.0, 0.0, 1.0, 1.401298464324817e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [7.988231712173355e-36, 0.0, 0.0, 1.0, 2.832650744503472e-32, 0.0, 1.0759514171562741e-35, 7.988231712173355e-36, 0.0, 1.1210387714598537e-44, 0.0], [7.238055339271376e-27, 0.0, 0.0, 1.0, 9.027078911128788e-24, 0.0, 2.50647826088904e-26, 7.238055339271376e-27, 0.0, 2.418388462048054e-32, 0.0], [0.02420095168054104, 2.736927490332164e-05, 0.0007709353230893612, 0.9228177666664124, 0.012470508925616741, 0.00042091519571840763, 0.01137903705239296, 0.02420095168054104, 0.0002696298761293292, 0.0027670448180288076, 0.0006748453015461564]])
da_h_to_p_attention = np.array([att[:-1] for att in da_h_to_p_attention[:-1]])
da_p_to_h_attention = np.array([att[:-1] for att in da_p_to_h_attention[:-1]])

syntail_h_to_p_attention = np.array([[0.06728091835975647, 0.13486415147781372, 0.06951075047254562, 0.03861537575721741, 0.07534218579530716, 0.05561855807900429, 0.049509819597005844, 0.06728091835975647, 0.06051437184214592, 0.044277679175138474, 0.06728091835975647, 0.04852147027850151, 0.06951075047254562, 0.03861537575721741, 0.06951102614402771, 0.04374563694000244], [1.868198706844737e-09, 9.661086153300857e-09, 0.0810348391532898, 1.5531990138484275e-09, 8.363333137140216e-09, 5.072947395490246e-09, 6.945001906899506e-09, 1.868198706844737e-09, 1.3046342672851097e-08, 1.810330330087595e-09, 1.868198706844737e-09, 0.8379302620887756, 0.0810348391532898, 1.5531990138484275e-09, 1.7700752863447633e-08, 1.5793022445365068e-09], [1.7057511441498923e-17, 2.3702163966631238e-17, 0.5, 1.5066529066114413e-17, 3.4793325040744297e-14, 5.709637762720899e-15, 4.767615152629712e-15, 1.7057511441498923e-17, 5.970877123214228e-16, 1.5570371394665362e-17, 1.7057511441498923e-17, 5.164718652750366e-10, 0.5, 1.5066529066114413e-17, 4.6057919432765013e-17, 1.7615699536294606e-17], [0.003481557359918952, 0.0072916429489851, 0.005535566247999668, 0.4286276698112488, 0.0049219136126339436, 0.00534663675352931, 0.0037223217077553272, 0.003481557359918952, 0.005182817578315735, 0.010624846443533897, 0.003481557359918952, 0.003637070534750819, 0.005535566247999668, 0.4286276698112488, 0.07669492065906525, 0.003806694643571973], [5.21782794749015e-08, 6.314716216593297e-08, 0.0029132061172276735, 5.09965047967853e-08, 0.9768079519271851, 0.002445095917209983, 0.014919462613761425, 5.21782794749015e-08, 1.995326073256365e-07, 2.488820882717846e-07, 5.21782794749015e-08, 2.3327659448568738e-07, 0.0029132061172276735, 5.09965047967853e-08, 3.9312453736783937e-08, 9.861420124934739e-08], [1.8926590428236523e-06, 2.9134493161109276e-05, 0.0007917669136077166, 2.017995939240791e-06, 0.006525659002363682, 0.9909834265708923, 0.0008199338335543871, 1.8926590428236523e-06, 2.6430494472151622e-05, 5.976672582619358e-06, 1.8926590428236523e-06, 4.4835715016233735e-06, 0.0007917669136077166, 2.017995939240791e-06, 8.946143680077512e-06, 2.809450506902067e-06], [1.740449806675315e-05, 2.606741509225685e-05, 0.006829783786088228, 1.4513449059450068e-05, 0.5055971741676331, 0.008470248430967331, 0.4719191789627075, 1.740449806675315e-05, 3.9298622141359374e-05, 7.18550436431542e-05, 1.740449806675315e-05, 6.340943946270272e-05, 0.006829783786088228, 1.4513449059450068e-05, 4.63432224933058e-05, 2.5613375328248367e-05], [0.06728091835975647, 0.13486415147781372, 0.06951075047254562, 0.03861537575721741, 0.07534218579530716, 0.05561855807900429, 0.049509819597005844, 0.06728091835975647, 0.06051437184214592, 0.044277679175138474, 0.06728091835975647, 0.04852147027850151, 0.06951075047254562, 0.03861537575721741, 0.06951102614402771, 0.04374563694000244], [1.8450515199219808e-05, 4.350946983322501e-05, 0.0007418636814691126, 1.7526803276268765e-05, 0.00013445412332657725, 0.00023681136372033507, 3.408453267184086e-05, 1.8450515199219808e-05, 0.9976539015769958, 1.5511768651776947e-05, 1.8450515199219808e-05, 0.00010331178054912016, 0.0007418636814691126, 1.7526803276268765e-05, 0.00018712342716753483, 1.720941872918047e-05], [0.04646290838718414, 0.08868159353733063, 0.07624439150094986, 0.04484420269727707, 0.11493902653455734, 0.08768800646066666, 0.07738706469535828, 0.04646290838718414, 0.05994979292154312, 0.04474495351314545, 0.04646290838718414, 0.0435660295188427, 0.07624439150094986, 0.04484420269727707, 0.049101103097200394, 0.052376534789800644]])
syntail_p_to_h_attention = np.array([[0.11858149617910385, 0.08551829308271408, 0.12251155078411102, 0.06805896013975143, 0.11770465224981308, 0.09802678972482681, 0.08726023137569427, 0.11858149617910385, 0.10665558278560638, 0.0771009624004364], [0.06968116760253906, 0.12964506447315216, 0.049904946237802505, 0.04178602993488312, 0.041759200394153595, 0.4423578977584839, 0.03831304982304573, 0.06968116760253906, 0.073731429874897, 0.043140068650245667], [3.4115022882997846e-17, 1.0329437305500733e-09, 1.0, 3.0133058132228826e-17, 1.8299693357870517e-12, 1.1419275525441797e-14, 9.535230305259424e-15, 3.4115022882997846e-17, 1.1941754246428456e-15, 3.523139907258921e-17], [0.007428009063005447, 0.007759801112115383, 0.011810299009084702, 0.9144902229309082, 0.012555427849292755, 0.011407213285565376, 0.007941687479615211, 0.007428009063005447, 0.011057699099183083, 0.008121699094772339], [6.017752696152456e-08, 1.7349491088225477e-07, 0.00011324744264129549, 4.360303407224819e-08, 0.9985840320587158, 0.00015316795906983316, 0.001148764044046402, 6.017752696152456e-08, 3.522251290632994e-07, 8.64354277041457e-08], [1.7219621213371283e-06, 4.079202881257515e-06, 0.0007203583372756839, 1.835995021792769e-06, 0.09688999503850937, 0.9016076922416687, 0.000745984842069447, 1.7219621213371283e-06, 2.404675615252927e-05, 2.5560691483406117e-06], [2.4172322810045443e-06, 8.806640835246071e-06, 0.0009485579212196171, 2.0157071958237793e-06, 0.9323076009750366, 0.0011763944057747722, 0.06554272025823593, 2.4172322810045443e-06, 5.458008217829047e-06, 3.557325953806867e-06], [0.11858149617910385, 0.08551829308271408, 0.12251155078411102, 0.06805896013975143, 0.11770465224981308, 0.09802678972482681, 0.08726023137569427, 0.11858149617910385, 0.10665558278560638, 0.0771009624004364], [1.8470473150955513e-05, 0.0001034235319821164, 0.0007426661904901266, 1.7545762602821924e-05, 7.794937846483663e-05, 0.00023706753563601524, 3.4121403587050736e-05, 1.8470473150955513e-05, 0.9987330436706543, 1.7228036085725762e-05], [0.03994537889957428, 0.04241803288459778, 0.05724227428436279, 0.10631415247917175, 0.2873786687850952, 0.15844866633415222, 0.18440338969230652, 0.03994537889957428, 0.045897919684648514, 0.03800617903470993], [0.11858149617910385, 0.08551829308271408, 0.12251155078411102, 0.06805896013975143, 0.11770465224981308, 0.09802678972482681, 0.08726023137569427, 0.11858149617910385, 0.10665558278560638, 0.0771009624004364], [2.0329378180861113e-09, 0.9118195176124573, 0.0881805345416069, 1.6901611221697976e-09, 1.2509507207880688e-08, 5.5202828974643126e-09, 7.557416026315877e-09, 2.0329378180861113e-09, 1.4196777087249757e-08, 1.7185660672325298e-09], [3.4115022882997846e-17, 1.0329437305500733e-09, 1.0, 3.0133058132228826e-17, 1.8299693357870517e-12, 1.1419275525441797e-14, 9.535230305259424e-15, 3.4115022882997846e-17, 1.1941754246428456e-15, 3.523139907258921e-17], [0.007428009063005447, 0.007759801112115383, 0.011810299009084702, 0.9144902229309082, 0.012555427849292755, 0.011407213285565376, 0.007941687479615211, 0.007428009063005447, 0.011057699099183083, 0.008121699094772339], [0.025349564850330353, 0.16765622794628143, 0.06844731420278549, 0.31022024154663086, 0.01834956184029579, 0.09587381035089493, 0.048076510429382324, 0.025349564850330353, 0.22381797432899475, 0.016859183087944984], [0.06944721937179565, 0.06511731445789337, 0.11396103352308273, 0.06702777743339539, 0.20037293434143066, 0.13106559216976166, 0.11566897481679916, 0.06944721937179565, 0.08960582315921783, 0.07828620076179504]])


fig, ax = plt.subplots()
im = ax.imshow(syntail_p_to_h_attention)

# We want to show all ticks...
ax.set_xticks(np.arange(len(hypothesis)))
ax.set_yticks(np.arange(len(premise)))
# ... and label them with the respective list entries
ax.set_xticklabels(hypothesis)
ax.set_yticklabels(premise)

# Rotate the tick labels and set their alignment.
plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
         rotation_mode="anchor")

ax.set_title("Syntail v1 Premise to Hypothesis Attention")
fig.tight_layout()
plt.savefig('syntail-p2h-attention.png')
plt.clf()


fig, ax = plt.subplots()
im = ax.imshow(syntail_h_to_p_attention)

# We want to show all ticks...
ax.set_xticks(np.arange(len(premise)))
ax.set_yticks(np.arange(len(hypothesis)))
# ... and label them with the respective list entries
ax.set_xticklabels(premise)
ax.set_yticklabels(hypothesis)

# Rotate the tick labels and set their alignment.
plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
         rotation_mode="anchor")

ax.set_title("Syntail v1 Hypothesis to Premise Attention")
fig.tight_layout()
plt.savefig('syntail-h2p-attention.png')
plt.clf()


fig, ax = plt.subplots()
im = ax.imshow(da_p_to_h_attention)

# We want to show all ticks...
ax.set_xticks(np.arange(len(hypothesis)))
ax.set_yticks(np.arange(len(premise)))
# ... and label them with the respective list entries
ax.set_xticklabels(hypothesis)
ax.set_yticklabels(premise)

# Rotate the tick labels and set their alignment.
plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
         rotation_mode="anchor")

ax.set_title("DA Premise to Hypothesis Attention")
fig.tight_layout()
plt.savefig('da-p2h-attention.png')
plt.clf()


fig, ax = plt.subplots()
im = ax.imshow(da_h_to_p_attention)

# We want to show all ticks...
ax.set_xticks(np.arange(len(premise)))
ax.set_yticks(np.arange(len(hypothesis)))
# ... and label them with the respective list entries
ax.set_xticklabels(premise)
ax.set_yticklabels(hypothesis)

# Rotate the tick labels and set their alignment.
plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
         rotation_mode="anchor")

ax.set_title("DA Hypothesis to Premise Attention")
fig.tight_layout()
plt.savefig('da-h2p-attention.png')
plt.clf()